---
description: Rules for project workflows including Git, Taskmaster, Memory MCP, and Context7 MCP.
globs: "**/*"
alwaysApply: true
---

## Template Setup Workflow
For detailed steps on template setup when initializing a project, see [template_setup.mdc](mdc:.cursor/rules/template_setup.mdc).

## MCP Server Workflows

### Memory MCP
- **User Confirmation Required**: Before creating, updating, or deleting any entities or relationships in the Memory MCP's knowledge graph, I must first explain what I intend to do and ask for your explicit confirmation.

### Context7 MCP
- **Purpose**: Use Context7 MCP to fetch current, accurate library documentation and implementation examples during development tasks.
- **When to Use**: Before implementing features with specific libraries, when encountering library-specific errors, for version-specific guidance, when user asks about library features, during code reviews, for implementation examples
- **Required Two-Step Process**:
  1. **First**: Use `mcp_context7_resolve-library-id` to convert library name (e.g., "react", "nextjs") to Context7-compatible ID
  2. **Then**: Use `mcp_context7_get-library-docs` with the resolved ID to fetch documentation
- **Best Practices**:
  - Always resolve library ID first - never skip this step
  - Use `topic` parameter to focus on specific areas (e.g., "hooks", "routing", "authentication")
  - Adjust `tokens` parameter based on complexity (default 10000, increase for comprehensive docs)
  - Combine with `research` tool when Context7 doesn't have the specific library

### Taskmaster Workflow
- **PRD as GitHub Issue**:
  1. After generating a Product Requirements Document (PRD), I will work with you to validate its contents.
  2. Once you accept the PRD, I will create a GitHub Issue in the project's repository containing the full text of the PRD.
  3. This GitHub Issue will serve as the single source of truth for the project's requirements.
  4. **DELETE the local PRD file** (`.taskmaster/docs/*.md`) immediately after creating the GitHub Issue to prevent confusion and ensure the GitHub Issue remains the authoritative version.
- **Task Generation Trigger**: I will only generate tasks from the PRD Issue after you explicitly tell me to "start working on the PRD" or give a similar instruction.
- **Task Confirmation**: After Taskmaster generates tasks, I must confirm with you which task to begin work on *before* executing any of them.

## Git Workflow

### Repository Initialization
For detailed steps on initializing a git repository when cloning the template directly, see [repository_initialization.mdc](mdc:.cursor/rules/repository_initialization.mdc).

### Branch Protection Workflow
- **NEVER commit directly to main branch** - All changes must go through pull request process
- **Required Workflow for All Changes**:
  1. **Create Feature Branch**: `git checkout -b feature/descriptive-name` or `git checkout -b fix/issue-description`
  2. **Make Changes**: Implement your changes on the feature branch
  3. **Commit Changes**: `git add .` and `git commit -m "descriptive message"`
  4. **Push Branch**: `git push -u origin feature/descriptive-name`
  5. **ðŸš¨ CRITICAL: Open Pull Request**: `gh pr create --title "Title" --body "Description"` or use GitHub web interface - **THIS STEP IS MANDATORY**
  6. **Merge via PR**: Never use `git push origin main` directly
- **Branch Naming Conventions**:
  - `feature/feature-name` for new features
  - `fix/bug-description` for bug fixes
  - `docs/documentation-update` for documentation changes
  - `refactor/component-name` for refactoring work
  - `chore/maintenance-task` for maintenance tasks
- **Before Starting Work**:
  ```bash
  git checkout main
  git pull origin main
  git checkout -b feature/your-feature-name
  ```
- **Emergency Exception**: Only in true emergencies (production down, security fix) may direct commits to main be considered, and they must be followed immediately by a retroactive PR for review
- **Pull Request Requirements**:
  - Descriptive title and body explaining the changes
  - Link to related issues when applicable
  - Ensure all CI checks pass before merging
  - Request review from team members when working in team environments

### CLI Best Practices
- **Always use SSH format for git remotes** (`git@github.com:user/repo.git`) rather than HTTPS format to leverage SSH key authentication instead of token-based authentication
- **Prevent interactive paging**: Set pager environment variable at the start of each terminal session:
  ```bash
  export PAGER=""
  ```
